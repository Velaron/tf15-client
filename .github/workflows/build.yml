name: Build
on:
  push:
    branches:
      - master
      - new-mod-api

jobs:
  android:
    name: Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Build
        run: ./gradlew assembleGitContinuous
        working-directory: android
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/git/continuous
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "36.0.0"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android
          path: android/app/build/outputs/apk/git/continuous/app-git-continuous-unsigned-signed.apk
  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch: ['x86', 'amd64']
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Visual Studio
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Configure project
        run: cmake --preset "win32-release-${{ matrix.arch }}"
      - name: Build
        run: cmake --build .
        working-directory: build
      - name: Package
        run: cpack --config CPackConfig.cmake
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: build/*.zip
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['i386', 'amd64']
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install libatomic1:i386 libgcc-s1:i386 \
            libstdc++6:i386 gcc-multilib g++-multilib cmake \
            ninja-build libfontconfig-dev:i386 libfontconfig-dev
      - name: Configure project
        run: cmake --preset "linux-release-${{ matrix.arch }}"
      - name: Build
        run: cmake --build .
        working-directory: build
      - name: Package
        run: cpack --config CPackConfig.cmake
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: build/*.tar.gz
  psvita:
    name: PS Vita
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install libatomic1 libgcc-s1 \
            libstdc++6 gcc-multilib g++-multilib cmake \
            ninja-build libfontconfig-dev
          sudo apt-get install cmake=3.28.3-1build7
          sudo ln -sf /usr/bin/cmake /usr/local/bin/cmake
      - name: Setup VitaSDK
        run: |
          chmod +x scripts/setup_psvita_sdk.sh
          scripts/setup_psvita_sdk.sh
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "$VITASDK/bin" >> $GITHUB_PATH
      - name: Configure project
        run: cmake --preset "psvita-debug"
      - name: Build
        run: cmake --build .
        working-directory: build
      - name: Write configuration files
        run: |
          pushd build
          chmod +x ${{ github.workspace }}/scripts/write_psvita_configs.sh
          ${{ github.workspace }}/scripts/write_psvita_configs.sh
          popd
      - name: Package
        run: cpack --config CPackConfig.cmake
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PSVita
          path: build/*.zip
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [android, windows, linux, psvita]
    steps:
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
      - name: Remove old release
        uses: ClementTsang/delete-tag-and-release@v0.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name == 'master' && 'continuous' || format('continuous-{0}', github.ref_name) }}
          delete_release: true
          repo: ${{ env.GITHUB_REPOSITORY }}
      - name: Prepare release
        run: |
          mv Android/app-git-continuous-unsigned-signed.apk TF15Client-Android.apk

          mv */*.zip .
          mv */*.tar.gz .

          sleep 60s
      # - name: Purge artifacts
      #   uses: geekyeggo/delete-artifact@v2
      #   with:
      #     name: "*"
      - name: Upload new release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_name: ${{ env.GITHUB_REPOSITORY }}
          repo_token: ${{ secrets.REPO_TOKEN }}
          file_glob: true
          file: TF15Client-*
          tag: ${{ github.ref_name == 'master' && 'continuous' || format('continuous-{0}', github.ref_name) }}
          overwrite: true
          prerelease: true
          release_name: TF15Client development build
